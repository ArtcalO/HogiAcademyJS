Les valeurs en javascript

1 STRINGS

En JavaScript, les strings sont des valeurs composées de texte et peuvent contenir des lettres, des chiffres, des symboles, de la ponctuation et même des emojis !

	Syntaxe	:	 "votre texte" ou 'votre texte'
	EXEMPLE :	"Hello Hogi"; 'HELLO HOGI'; "It's six o'clock.";
	Exercise :	Ecrivez 'It's six o'clock.';

*STRINGS : méthodes et propriétés
	Les chaînes ont leurs propres variables et fonctions intégrées, également appelées propriétés et méthodes. Voici quelques-uns des plus courants.

	a) Longueur de la chaîne
		La propriété length d’une chaîne garde une trace du nombre de caractères dont elle dispose.

		Syntaxe : "chaine de caractere".length
		Exemple : 'hello HOGI'.length
		Exercice : Donner la longeur d'une chaine de caratere de votre choix

	b) toLowerCase, méthode
		La méthode toLowerCase d’une chaîne en JavaScript renvoie une copie de la chaîne dont les lettres sont converties en minuscules. Les chiffres, symboles et autres caractères ne sont pas affectés.

		Syntaxe : "chaine de caractere".toLowerCase();
		Exemple : 'hello HOGI'.toLowerCase();
		Exercice : Convertissez "hello hogi" en MAJUSCULES

	c) trim, méthode
		La méthode de découpage d’une chaîne renvoie une copie de la chaîne avec les espaces de début et de fin supprimés.

		Syntaxe : "   votre texte ".trim();
		Exemple : "   mais gardez les espaces du milieu   ".trim();
		Exercice : "  enlevez les espaces   "


2 NUMBERS

	Les nombres sont des valeurs qui peuvent être utilisées dans des opérations mathématiques. Vous n’avez pas besoin d’une syntaxe spéciale pour les nombres - il suffit de les écrire directement en JavaScript

	Exemples :	12345;
				10 + 3.14159;
				1 / 3;

					4
	Exercice :	1 + -
				    3

3 BOOLÉENS
	En JavaScript, une valeur booléenne peut être TRUE ou FALSE. Si vous avez besoin de savoir «oui» ou «non» à propos de quelque chose, alors vous voudrez utiliser la fonction booléenne. Cela semble extrêmement simple, mais les booléens sont utilisés tout le temps dans la programmation JavaScript, et ils sont extrêmement utiles. Tout ce qui doit être «activé» ou «désactivé», «oui» ou «non», «vrai» ou «faux», ou qui n’a qu’un but temporaire, convient généralement aux booléens.


4 OPÉRATEURS
	Les opérateurs sont les symboles entre les valeurs qui permettent différentes opérations telles que l’addition, la soustraction, la multiplication, etc. JavaScript a des dizaines d’opérateurs, alors concentrons-nous sur ceux que vous êtes susceptible de voir le plus souvent.

	Operateurs arithemtique disponibles
		+
		-
		/
		*
		//

	Groupement
		()

		Exemple : 1+(5*100);
		Exercice : 

	Concatenation
		syntax : string+string


5 VARIABLES
	Les variables sont nommées valeurs et peuvent stocker n’importe quel type de valeur JavaScript.

	**Declaration des varaible :

		var x = 100;

		var est le mot-clé qui indique à JavaScript que vous déclarez une variable.
		x est le nom de cette variable.
		= est l’opérateur qui indique à JavaScript qu’une valeur est à venir.
		100 est la valeur de la variable à stocker.

	** Utilisation de variables
		Après avoir déclaré une variable, vous pouvez la référencer par son nom ailleurs dans votre code.

		EXEMPLE : 
			var x = 100;
			x + 102;
		RESULTAT :
			202

	** Vous pouvez même utiliser une variable lors de la déclaration d’autres variables.

		EXEMPLE : 
			var x = 100;
			var y = x + 102;
			y;
		RESULTAT : 
			202

	** Réaffectation de variables
		Vous pouvez donner une nouvelle valeur à une variable existante à tout moment après sa déclaration.

		EXEMPLE
			var climat = "chaud";
			climat = "froid";
			climat;
		OUTPUT
			"froid"

	** Attribution de noms aux variables
		Les noms de variables sont assez flexibles tant que vous suivez quelques règles:

		Commencez-les par une lettre, un trait de soulignement _ ou un signe dollar $.

		Après la première lettre, vous pouvez utiliser des chiffres, ainsi que des lettres, des traits de soulignement ou des signes dollar.

		N’utilisez aucun des mots-clés réservés de JavaScript.

		Dans cet esprit, voici des noms de variables valides :
			EXEMPLE
				var toutMot = "lowercase word, then uppercase";
				var mon2Voir = "maths";
				var J_AI_FAIM = true;
				var _Hello_ = "Bonjour hogI"
				var $_$ = "Surprise";


		Et voici quelques noms de variables non valides - essayez de repérer ce qui ne va pas avec chacun d’eux:

			EXEMPLE
				var total% = 78;
				var 2fast2catch = "bold claim";
				var function = false;
				var class = "easy";


		N.B : Les noms de variables sont sensibles à la casse, donc myVar, MyVar et myvar sont tous des variables différentes. Mais en général, c’est une bonne pratique d’éviter de nommer les variables de la même manière.